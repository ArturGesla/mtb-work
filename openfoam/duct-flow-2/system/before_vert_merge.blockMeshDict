/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;	//This gives you the scale: 0.001 would mean all units in this file are [mm]

vertices		//list of vertices defining the geometry
(

    (-100 -100 -50)		//This is point 0. Not 1!
    (0 -100 -50)		//This is point 1
    (0 0 -50)		//point 2
    (-100 0 -50)		//point 3
    (-100 -100 0)		//point 4
    (0 -100 0)		//point 5
    (0 0 0) 	//point 6
    (-100 0 0)		//point 7

    (0 -100 -50)		//This is point 0. Not 1!
    (100 -100 -50)		//This is point 1
    (100 0 -50)		//point 2
    (0 0 -50)		//point 3
    (0 -100 0)		//point 4
    (100 -100 0)		//point 5
    (100 0 0) 	//point 6
    (0 0 0)		//point 7

    (0 0 -50)		//This is point 0. Not 1!
    (100 0 -50)		//This is point 1
    (100 100 -50)		//point 2
    (0 100 -50)		//point 3
    (0 0 0)		//point 4
    (100 0 0)		//point 5
    (100 100 0) 	//point 6
    (0 100 0)		//point 7

    (-100 0 -50)		//This is point 0. Not 1!
    (0 0 -50)		//This is point 1
    (0 100 -50)		//point 2
    (-100 100 -50)		//point 3
    (-100 0 0)		//point 4
    (0 0 0)		//point 5
    (0 100 0) 	//point 6
    (-100 100 0)		//point 7


//top
    (-100 -100 0)		//This is point 0. Not 1!
    (0 -100 0)		//This is point 1
    (0 0 0)		//point 2
    (-100 0 0)		//point 3
    (-100 -100 50)		//point 4
    (0 -100 50)		//point 5
    (0 0 50) 	//point 6
    (-100 0 50)		//point 7

    (0 -100 0)		//This is point 0. Not 1!
    (100 -100 0)		//This is point 1
    (100 0 0)		//point 2
    (0 0 0)		//point 3
    (0 -100 50)		//point 4
    (100 -100 50)		//point 5
    (100 0 50) 	//point 6
    (0 0 50)		//point 7

    (0 0 0)		//This is point 0. Not 1!
    (100 0 0)		//This is point 1
    (100 100 0)		//point 2
    (0 100 0)		//point 3
    (0 0 50)		//point 4
    (100 0 50)		//point 5
    (100 100 50) 	//point 6
    (0 100 50)		//point 7

    (-100 0 0)		//This is point 0. Not 1!
    (0 0 0)		//This is point 1
    (0 100 0)		//point 2
    (-100 100 0)		//point 3
    (-100 0 50)		//point 4
    (0 0 50)		//point 5
    (0 100 50) 	//point 6
    (-100 100 50)		//point 7



);

blocks			//defining the block which the geometry is made out of
(
//    hex (0 1 2 3 4 5 6 7) (64 64 64) simpleGrading (1 1 1)  	
    hex (0 1 2 3 4 5 6 7) (8 8 8) simpleGrading (0.2 0.2 0.2)  	
    hex (8 9 10 11 12 13 14 15) (8 8 8) simpleGrading (5 0.2 0.2)  	
    hex (16 17 18 19 20 21 22 23) (8 8 8) simpleGrading (5 5  0.2)  	
    hex (24 25 26 27 28 29 30 31) (8 8 8) simpleGrading (0.2 5 0.2)  	

    hex (32 33 34 35 36 37 38 39) (8 8 8) simpleGrading (0.2 0.2 5)  	
    hex (40 41 42 43 44 45 46 47) (8 8 8) simpleGrading (5 0.2 5)  	
    hex (48 49 50 51 52 53 54 55) (8 8 8) simpleGrading (5 5  5)  	
    hex (56 57 58 59 60 61 62 63) (8 8 8) simpleGrading (0.2 5 5)  	
//    hex (0 1 2 3 4 5 6 7) (160 160 80) simpleGrading (1 1 1)  	
//    hex (0 1 2 3 4 5 6 7) (50 25 50) simpleGrading (1 1 1)  	
//this means that the only block in the geometry is defined by vertices (0 1 2 ...), there are 100, 10 
//and 1 cells in the x, y, and z direction and that in each direction all the cells have the same length 
);

edges
(
//    spline 0 1 
//    (
//	    (5 -2 0)
//    )
//    spline 4 5 
//    (
//	    (5 -2 0.1)
//    )
);

boundary
(
    walls	//choose a name for the boundary
    {
        type wall;	//define the type of the boundary
        faces
        (
            (0 4 5 1)	//list the faces; vertices should be listed in clockwise direction, as seen from the block
            (0 4 5 1)	//list the faces; vertices should be listed in clockwise direction, as seen from the block
            (0 4 5 1)	//list the faces; vertices should be listed in clockwise direction, as seen from the block
            (0 4 5 1)	//list the faces; vertices should be listed in clockwise direction, as seen from the block
//            (2 6 7 3)

        );
    }

    
    inlet
    {
        type patch;
        faces
        (
//            (3 7 4 0)
            (7 6 5 4)

	);
    }	   	


    outlet
    {
	type patch;
	faces
	(
//            (2 1 5 6)
            (1 2 3 0)

	);
    }


    frontAndBack
    {
        type wall;
        faces
        (
//            (1 2 3 0)
//            (7 6 5 4)
            (3 7 4 0)
            (2 1 5 6)


        );
    }
);


// ************************************************************************* //
