/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;	//This gives you the scale: 0.001 would mean all units in this file are [mm]

vertices		//list of vertices defining the geometry
(

    (1 0 0)		//This is point 0. Not 1!
    (10 0 0)		//This is point 1
    (9.8079 1.9509 0)		//point 2
    (0.98079 0.19509 0)		//point 3
    (1 0 1)		//point 4
    (10 0 1)		//point 5
    (9.8079 1.9509 1) 	//point 6
    (0.98079 0.19509 1)		//point 7
);

blocks			//defining the block which the geometry is made out of
(
//    hex (0 1 2 3 4 5 6 7) (64 64 64) simpleGrading (1 1 1)  	
    hex (0 1 2 3 4 5 6 7) (10 4 3) simpleGrading (1 1 1)  	
//    hex (0 1 2 3 4 5 6 7) (300 20 80) simpleGrading (1 1 1)  	
//    hex (0 1 2 3 4 5 6 7) (50 25 50) simpleGrading (1 1 1)  	
//this means that the only block in the geometry is defined by vertices (0 1 2 ...), there are 100, 10 
//and 1 cells in the x, y, and z direction and that in each direction all the cells have the same length 
);

edges
(
//    spline 0 1 
//    (
//	    (5 -2 0)
//    )
//    spline 4 5 
//    (
//	    (5 -2 0.1)
//    )
arc 1 2 (9.9518 0.9802 0)
arc 5 6 (9.9518 0.9802 1)
arc 0 3 (0.99518 0.09802 0)
arc 4 7 (0.99518 0.09802 1)
);

boundary
(
    inlet	//choose a name for the boundary
    {
        type cyclic;	//define the type of the boundary
	neighbourPatch outlet;
        faces
        (
            (0 4 5 1)	//list the faces; vertices should be listed in clockwise direction, as seen from the block
  	);
    }
    outlet	//choose a name for the boundary
    {
        type cyclic;	//define the type of the boundary
	neighbourPatch inlet;
        faces((2 6 7 3));
    }
    stator
    {
        type wall;
        faces((7 6 5 4));
    }
    rotor
    {
	type wall;
	faces((1 2 3 0));
    }

    shroud
    {
        type wall;
        faces((2 1 5 6));
    }
    hub
    {
        type wall;
        faces((3 7 4 0));
    }
);


// ************************************************************************* //
