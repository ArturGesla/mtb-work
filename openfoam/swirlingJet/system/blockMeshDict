/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;	//This gives you the scale: 0.001 would mean all units in this file are [mm]
R 50;
H 40;
halfAngle 45;

//- Derived quantities
radHalfAngle #calc "degToRad($halfAngle)";
hradHalfAngle #calc "degToRad($halfAngle)/2";

//in case angle 45 x and y the same
mR #calc "-$R";

y #calc "$R*sin($radHalfAngle)";
x #calc "$R*cos($radHalfAngle)";
mx #calc "-$R*cos($radHalfAngle)";
my #calc "-$R*sin($radHalfAngle)";

yh #calc "$R*sin($radHalfAngle)*2/3";
xh #calc "$R*cos($radHalfAngle)*2/3";
mxh #calc "-$R*cos($radHalfAngle)*2/3";
myh #calc "-$R*sin($radHalfAngle)*2/3";

//for arcs
yp #calc "$R*sin($hradHalfAngle)";
myp #calc "-$R*sin($hradHalfAngle)";
xp #calc "$R*cos($hradHalfAngle)";
mxp #calc "-$R*cos($hradHalfAngle)";

// for central point
xpp #calc "$R*cos($radHalfAngle)";
mxpp #calc "-$R*cos($radHalfAngle)";


vertices		//list of vertices defining the geometry
(

//block 0
    (0 0 0)		//This is point 0. Not 1!
    ($x $my 0)		//This is point 1
    ($R 0 0)		//point 2
    ($x $y 0)		//point 3

($xh $myh  0)	//4
($xpp 0 0)	//5
($xh $yh 0)	//6

    (0 0 $H)	//7
    ($x $my $H)	//8
    ($R 0 $H)	//9
    ($x $y $H)	//10

($xh $myh  $H)	//11
($xpp 0 $H)	//12
($xh $yh $H)	//13



//block 1
    (0 $R 0)	//14
    ($mx $y 0)	//15
    (0 $xpp 0)	//16
    ($mxh $yh 0)	//17

    (0 $R $H)	//18
    ($mx $y $H)	//19
    (0 $xpp $H)	//20
    ($mxh $yh $H)	//21

//block 2
    ($mR 0 0)	//22
    ($mx $my 0)	//23
    ($mxpp 0 0)	//24
    ($mxh $myh 0)	//25

    ($mR 0 $H)	//26
    ($mx $my $H)	//27
    ($mxpp 0 $H)	//28
    ($mxh $myh $H)	//29

//block 3
    (0 $mR 0)	//30
    (0 $mxpp 0)	//31

    (0 $mR $H)	//30
    (0 $mxpp $H)	//31





);

//resolxy 64;
//resolz 32;
resolxy 30;
resolxy2 4;
resolz 40;

zref 1;
invzref 1;

rref 100;
invrref 0.01;

rrefouter 1;

blocks			//defining the block which the geometry is made out of
(

//    hex (0 4 5 6 7 11 12 13) (5 5 5) simpleGrading (1 1 1)  	//65 it nu 1e-2
//    hex (4 1 2 5 11 8 9 12) (5 5 5) simpleGrading (1 1 1)  	//65 it nu 1e-2
//    hex (5 2 3 6 12 9 10 13) (5 5 5) simpleGrading (1 1 1)  	//65 it nu 1e-2

//    hex (0 4 5 6 7 11 12 13) (32 32 16) simpleGrading (1 1 1)  	//65 it nu 1e-2
//    hex (4 1 2 5 11 8 9 12) (32 32 16) simpleGrading (1 1 1)  	//65 it nu 1e-2
//    hex (5 2 3 6 12 9 10 13) (32 32 16) simpleGrading (1 1 1)  	//65 it nu 1e-2

//    hex (0 4 5 6 7 11 12 13) (64 64 32) simpleGrading (1 1 1)  	//65 it nu 1e-2
//    hex (4 1 2 5 11 8 9 12) (64 64 32) simpleGrading (1 1 1)  	//65 it nu 1e-2
//    hex (5 2 3 6 12 9 10 13) (64 64 32) simpleGrading (1 1 1)  	//65 it nu 1e-2

//    hex (0 4 5 6 7 11 12 13) ($resolxy $resolxy $resolz) simpleGrading (1 1 1)  	//65 it nu 1e-2
//    hex (4 1 2 5 11 8 9 12) ($resolxy $resolxy $resolz) simpleGrading (1 1 1)  	//65 it nu 1e-2
//    hex (5 2 3 6 12 9 10 13) ($resolxy $resolxy $resolz) simpleGrading (1 1 1)  	//65 it nu 1e-2


//block 0
    hex (0 4 5 6 7 11 12 13) ($resolxy $resolxy $resolz) simpleGrading ($rref $rref ((0.5 0.5 $zref) (0.5 0.5 $invzref)))  	//65 it nu 1e-2
    hex (4 1 2 5 11 8 9 12) ($resolxy2 $resolxy $resolz) simpleGrading ($rrefouter $rref ((0.5 0.5 $zref) (0.5 0.5 $invzref)))  	//65 it nu 1e-2
    hex (5 2 3 6 12 9 10 13) ($resolxy2 $resolxy $resolz) simpleGrading ($rrefouter $invrref ((0.5 0.5 $zref) (0.5 0.5 $invzref)))  	//65 it nu 1e-2

//block 1
    hex (0 6 16 17 7 13 20 21) ($resolxy $resolxy $resolz) simpleGrading ($rref $rref ((0.5 0.5 $zref) (0.5 0.5 $invzref)))  	//65 it nu 1e-2
    hex (6 3 14 16 13 10 18 20) ($resolxy2 $resolxy $resolz) simpleGrading ($rrefouter $rref ((0.5 0.5 $zref) (0.5 0.5 $invzref)))  	//65 it nu 1e-2
    hex (16 14 15 17 20 18 19 21) ($resolxy2 $resolxy $resolz) simpleGrading ($rrefouter $invrref ((0.5 0.5 $zref) (0.5 0.5 $invzref)))  	//65 it nu 1e-2

//block 2
    hex (0 17 24 25 7 21 28 29) ($resolxy $resolxy $resolz) simpleGrading ($rref $rref ((0.5 0.5 $zref) (0.5 0.5 $invzref)))  	//65 it nu 1e-2
    hex (17 15 22 24 21 19 26 28) ($resolxy2 $resolxy $resolz) simpleGrading ($rrefouter $rref ((0.5 0.5 $zref) (0.5 0.5 $invzref)))  	//65 it nu 1e-2
    hex (24 22 23 25 28 26 27 29) ($resolxy2 $resolxy $resolz) simpleGrading ($rrefouter $invrref ((0.5 0.5 $zref) (0.5 0.5 $invzref)))  	//65 it nu 1e-2

//block 3
    hex (0 25 31 4 7 29 33 11) ($resolxy $resolxy $resolz) simpleGrading ($rref $rref ((0.5 0.5 $zref) (0.5 0.5 $invzref)))  	//65 it nu 1e-2
    hex (25 23 30 31 29 27 32 33) ($resolxy2 $resolxy $resolz) simpleGrading ($rrefouter $rref ((0.5 0.5 $zref) (0.5 0.5 $invzref)))  	//65 it nu 1e-2
    hex (31 30 1 4 33 32 8 11) ($resolxy2 $resolxy $resolz) simpleGrading ($rrefouter $invrref ((0.5 0.5 $zref) (0.5 0.5 $invzref)))  	//65 it nu 1e-2


);

edges
(
//block 0
arc 1 2 ($xp $myp 0)
arc 2 3 ($xp $yp 0)
arc 8 9 ($xp $myp $H) //p1 p2 x y z
arc 9 10 ($xp $yp $H) //p1 p2 x y z

//block 1
arc 3 14 ($yp $xp 0)
arc 14 15 ($myp $xp 0)
arc 10 18 ($yp $xp $H) //p1 p2 x y z
arc 18 19 ($myp $xp $H) //p1 p2 x y z

//block 2
arc 15 22 ($mxp $yp 0)
arc 22 23 ($mxp $myp 0)
arc 19 26 ($mxp $yp $H) //p1 p2 x y z
arc 26 27 ($mxp $myp $H) //p1 p2 x y z

//block 3
arc 23 30 ($myp $mxp 0)
arc 30 1 ($yp $mxp 0)
arc 27 32 ($myp $mxp $H) //p1 p2 x y z
arc 32 8 ($yp $mxp $H) //p1 p2 x y z
);

// 6--5
// /  /
//7--4
// 2--1
// /  /
//3--0
boundary
(
    shroud1	//choose a name for the boundary
    {
//        type cyclic;	//define the type of the boundary
//	neighbourPatch inlet;
        type wall;
//        type patch;

        faces
        (
//            (4 11 12 5)
            (1 8 9 2)
            (2 9 10 3)

            (3 10 18 14)
            (14 18 19 15)

            (15 19 26 22)
            (22 26 27 23)

            (23 27 32 30)
            (30 32 8 1)

        );
    }

    
    stator
    {
//        type wall;
        type patch;
        faces
        (
//            (3 7 4 0)
            (7 13 12 11)
            (11 12 9 8)
           (13 10 9 12)

            (7 21 20 13)
            (13 20 18 10)
           (21 19 18 20)

            (7 29 28 21)
            (21 28 26 19)
           (29 27 26 28)

            (7 11 33 29)
            (29 33 32 27)
           (11 8 32 33)


	);
    }


    rotor
    {
	type patch;
//	type wall;
	faces
	(
//            (2 1 5 6)
            (0 4 5 6)
            (4 1 2 5)
            (6 5 2 3)


            (0 6 16 17)
            (6 3 14 16)
            (16 14 15 17)

            (0 17 24 25)
            (17 15 22 24)
            (24 22 23 25)

            (0 25 31 4)
            (25 23 30 31)
            (31 30 1 4)

	);
    }
);


// ************************************************************************* //
